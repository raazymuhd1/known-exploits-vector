// SPDX-Licenses-Identifier: MIT;
pragma solidity 0.8.20;

import { Test, console } from "forge-std/Test.sol";
import { StdInvariant } from "forge-std/StdInvariant.sol";
import { HandlerStatefulFuzzCatches } from "../../../src/invariant-break/HandlerStatefulFuzzCatches.sol";
import { MockUSDC } from "../../mocks/MockUSDC.sol";
import { YeildERC20 } from "../../mocks/YeildERC20.sol";
import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import { Handler } from "./Handler.t.sol";

contract Invariant is StdInvariant, Test {
    HandlerStatefulFuzzCatches handlerStatefulFuzzCatches;
    Handler handler;
    YeildERC20 yieldErc20;
    MockUSDC mockUsdc;
    IERC20[] supportedTokens;

    address user = makeAddr("USER");
    uint256 startingAmount;

    function setUp() public {
        vm.startPrank(user);
        yieldErc20 = new YeildERC20();
        mockUsdc = new MockUSDC();
        startingAmount = yieldErc20.INITIAL_SUPPLY();
        mockUsdc.mint(user, startingAmount);
        vm.stopPrank();

        supportedTokens.push(yieldErc20);
        supportedTokens.push(mockUsdc);

        handlerStatefulFuzzCatches = new HandlerStatefulFuzzCatches(supportedTokens);
        handler = new Handler(handlerStatefulFuzzCatches, mockUsdc, yieldErc20, user);

        bytes4[] memory selectors = new bytes4[](4);
        selectors[0] = handler.depositYeildErc20.selector;
        selectors[1] = handler.depositMockUsdc.selector;
        selectors[2] = handler.withdrawYeildErc20.selector;
        selectors[3] = handler.withdrawMockUsdc.selector;

        targetSelector(FuzzSelector({ addr: address(handler), selectors: selectors }));
        targetContract(address(handler));
    }

    // function testStartingBalanceTheSame() public {
    //     assert(startingAmount == yieldErc20.balanceOf(user));
    //     assert(startingAmount == mockUsdc.balanceOf(user));

    //     console.log(startingAmount);
    //     console.log(yieldErc20.balanceOf(user));
    // }

    function statefulFuzz_testInvariantBreaksHandler() public {
        // vm.startPrank(user);
        // handlerStatefulFuzzCatches.withdrawToken(yieldErc20);
        // handlerStatefulFuzzCatches.withdrawToken(mockUsdc);
        // vm.stopPrank();

        assert(mockUsdc.balanceOf(address(handlerStatefulFuzzCatches)) == 0);
        assert(yieldErc20.balanceOf(address(handlerStatefulFuzzCatches)) == 0);

        assert(mockUsdc.balanceOf(user) == startingAmount);
        assert(yieldErc20.balanceOf(user) == startingAmount);

    }

}