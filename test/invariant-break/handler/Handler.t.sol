// SPDX-Licenses-Identifier: MIT;
pragma solidity 0.8.20;

import { Test, console } from "forge-std/Test.sol";
import { HandlerStatefulFuzzCatches } from "../../../src/invariant-break/HandlerStatefulFuzzCatches.sol";
import { MockUSDC } from "../../mocks/MockUSDC.sol";
import { YeildERC20 } from "../../mocks/YeildERC20.sol";

contract Handler is Test {
    HandlerStatefulFuzzCatches handlerStatefulFuzzCatches;
    MockUSDC mockUsdc;
    YeildERC20 yeildErc20;

    address user;

    constructor(HandlerStatefulFuzzCatches _handlerStatefulFuzzCatches, MockUSDC _mockUsdc, YeildERC20 _yeildErc20, address _user) {
        handlerStatefulFuzzCatches = _handlerStatefulFuzzCatches;
        mockUsdc = _mockUsdc;
        yeildErc20 = _yeildErc20;
        user = _user;
    }

    function depositYeildErc20(uint256 amount) public {
        // bound the token amount that could deposited
        bound(amount, 0, yeildErc20.balanceOf(user));

        vm.startPrank(user);
        yeildErc20.approve(address(handlerStatefulFuzzCatches), amount);
        handlerStatefulFuzzCatches.depositToken(yeildErc20, amount);
        vm.stopPrank();
    }

    function depositMockUsdc(uint256 amount) public {
        // bound the token amount that could deposited
        bound(amount, 0, mockUsdc.balanceOf(user));

        vm.startPrank(user);
        mockUsdc.approve(address(handlerStatefulFuzzCatches), amount);
        handlerStatefulFuzzCatches.depositToken(mockUsdc, amount);
        vm.stopPrank();
    }

    function withdrawYeildErc20() public {
        vm.startPrank(user);
        handlerStatefulFuzzCatches.withdrawToken(yeildErc20);
        vm.stopPrank();
    }

    function withdrawMockUsdc() public {
        vm.startPrank(user);
        handlerStatefulFuzzCatches.withdrawToken(mockUsdc);
        vm.stopPrank();
    }
}